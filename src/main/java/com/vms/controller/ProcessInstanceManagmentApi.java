/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.5).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.vms.controller;

import com.vms.model.InlineResponse2002;
import com.vms.model.InlineResponse2003;
import com.vms.model.ProcessInstanceEntity;
import com.vms.model.StandardResponse;
import com.vms.model.StartProcessInstanceReqVO;
import com.fasterxml.jackson.databind.ObjectMapper;
import io.swagger.annotations.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import javax.validation.constraints.*;
import java.io.IOException;
import java.util.List;
import java.util.Optional;

@Api(value = "ProcessInstanceManagment", description = "the ProcessInstanceManagment API")
public interface ProcessInstanceManagmentApi {

    Logger log = LoggerFactory.getLogger(ProcessInstanceManagmentApi.class);

    default Optional<ObjectMapper> getObjectMapper() {
        return Optional.empty();
    }

    default Optional<HttpServletRequest> getRequest() {
        return Optional.empty();
    }

    default Optional<String> getAcceptHeader() {
        return getRequest().map(r -> r.getHeader("Accept"));
    }

    @ApiOperation(value = "创建流程实例", nickname = "createProcessInstance", notes = "", response = StandardResponse.class, tags={ "process instance managment", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "create instance successfully", response = StandardResponse.class) })
    @RequestMapping(value = "/processInstance",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<StandardResponse> createProcessInstance(@ApiParam(value = "" ,required=true )  @Valid @RequestBody StartProcessInstanceReqVO startProcessInstanceReq) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{  \"code\" : 0,  \"data\" : \"{}\",  \"message\" : \"message\"}", StandardResponse.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default ProcessInstanceManagmentApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "根据instance id删除流程实例", nickname = "deleteProcessInstanceByID", notes = "", response = StandardResponse.class, tags={ "process instance managment", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "delete process instance successfully", response = StandardResponse.class) })
    @RequestMapping(value = "/processInstance/{id}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.DELETE)
    default ResponseEntity<StandardResponse> deleteProcessInstanceByID(@ApiParam(value = "",required=true) @PathVariable("id") String id) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{  \"code\" : 0,  \"data\" : \"{}\",  \"message\" : \"message\"}", StandardResponse.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default ProcessInstanceManagmentApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "根据instance id查看流程实例", nickname = "queryProcessInstanceByID", notes = "", response = ProcessInstanceEntity.class, tags={ "process instance managment", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "get process instance list", response = ProcessInstanceEntity.class) })
    @RequestMapping(value = "/processInstance/{id}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.GET)
    default ResponseEntity<ProcessInstanceEntity> queryProcessInstanceByID(@ApiParam(value = "",required=true) @PathVariable("id") String id) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{  \"processDefinitionId\" : 6,  \"startUserId\" : \"startUserId\",  \"isSuspended\" : true,  \"deploymentId\" : \"deploymentId\",  \"businessKey\" : \"businessKey\",  \"tenantId\" : \"tenantId\",  \"name\" : \"name\",  \"processDefinitionName\" : \"processDefinitionName\",  \"processDefinitionVersion\" : 1,  \"processDefinitionKey\" : \"processDefinitionKey\"}", ProcessInstanceEntity.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default ProcessInstanceManagmentApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "根据instance key获取列表", nickname = "queryProcessInstanceByKey", notes = "", response = InlineResponse2002.class, tags={ "process instance managment", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "get process instance list", response = InlineResponse2002.class) })
    @RequestMapping(value = "/processInstance/instanceKey/{key}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.GET)
    default ResponseEntity<InlineResponse2002> queryProcessInstanceByKey(@ApiParam(value = "",required=true) @PathVariable("key") String key) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{  \"code\" : 0,  \"data\" : [ {    \"processDefinitionId\" : 6,    \"startUserId\" : \"startUserId\",    \"isSuspended\" : true,    \"deploymentId\" : \"deploymentId\",    \"businessKey\" : \"businessKey\",    \"tenantId\" : \"tenantId\",    \"name\" : \"name\",    \"processDefinitionName\" : \"processDefinitionName\",    \"processDefinitionVersion\" : 1,    \"processDefinitionKey\" : \"processDefinitionKey\"  }, {    \"processDefinitionId\" : 6,    \"startUserId\" : \"startUserId\",    \"isSuspended\" : true,    \"deploymentId\" : \"deploymentId\",    \"businessKey\" : \"businessKey\",    \"tenantId\" : \"tenantId\",    \"name\" : \"name\",    \"processDefinitionName\" : \"processDefinitionName\",    \"processDefinitionVersion\" : 1,    \"processDefinitionKey\" : \"processDefinitionKey\"  } ],  \"message\" : \"message\"}", InlineResponse2002.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default ProcessInstanceManagmentApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "根据ID查询 process instance的历史归档记录", nickname = "queryTaskHistoricalDataByID", notes = "", response = InlineResponse2003.class, tags={ "process instance managment", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "get instance historical task list", response = InlineResponse2003.class) })
    @RequestMapping(value = "/processInstance/historic/{id}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.GET)
    default ResponseEntity<InlineResponse2003> queryTaskHistoricalDataByID(@ApiParam(value = "",required=true) @PathVariable("id") Integer id) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{  \"code\" : 0,  \"data\" : [ {    \"workTimeInMillis\" : 1,    \"durationInMillis\" : 6,    \"startTime\" : \"2000-01-23T04:56:07.000+00:00\",    \"endTime\" : \"2000-01-23T04:56:07.000+00:00\",    \"deleteReason\" : \"deleteReason\",    \"claimTime\" : \"2000-01-23T04:56:07.000+00:00\"  }, {    \"workTimeInMillis\" : 1,    \"durationInMillis\" : 6,    \"startTime\" : \"2000-01-23T04:56:07.000+00:00\",    \"endTime\" : \"2000-01-23T04:56:07.000+00:00\",    \"deleteReason\" : \"deleteReason\",    \"claimTime\" : \"2000-01-23T04:56:07.000+00:00\"  } ],  \"message\" : \"message\"}", InlineResponse2003.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default ProcessInstanceManagmentApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }

}
